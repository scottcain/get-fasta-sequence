"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var generic_filehandle_1 = require("generic-filehandle");
function _faiOffset(idx, pos) {
    return (idx.offset +
        idx.lineBytes * Math.floor(pos / idx.lineLength) +
        (pos % idx.lineLength));
}
function readFAI(fai, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var text, idCounter, currSeq, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fai.readFile(opts)];
                case 1:
                    text = _a.sent();
                    if (!(text && text.length)) {
                        throw new Error('No data read from FASTA index (FAI) file');
                    }
                    idCounter = 0;
                    data = text
                        .toString('utf8')
                        .split(/\r?\n/)
                        .filter(function (line) { return /\S/.test(line); })
                        .map(function (line) { return line.split('\t'); })
                        .filter(function (row) { return row[0] !== ''; })
                        .map(function (row) {
                        if (!currSeq || currSeq.name !== row[0]) {
                            currSeq = { name: row[0], id: idCounter };
                            idCounter += 1;
                        }
                        return {
                            id: currSeq.id,
                            name: row[0],
                            length: +row[1],
                            start: 0,
                            end: +row[1],
                            offset: +row[2],
                            lineLength: +row[3],
                            lineBytes: +row[4],
                        };
                    });
                    return [2 /*return*/, {
                            name: Object.fromEntries(data.map(function (entry) { return [entry.name, entry]; })),
                            id: Object.fromEntries(data.map(function (entry) { return [entry.id, entry]; })),
                        }];
            }
        });
    });
}
var IndexedFasta = /** @class */ (function () {
    function IndexedFasta(_a) {
        var fasta = _a.fasta, fai = _a.fai, path = _a.path, faiPath = _a.faiPath, _b = _a.chunkSizeLimit, chunkSizeLimit = _b === void 0 ? 1000000 : _b;
        if (fasta) {
            this.fasta = fasta;
        }
        else if (path) {
            this.fasta = new generic_filehandle_1.LocalFile(path);
        }
        else {
            throw new Error('Need to pass filehandle for fasta or path to localfile');
        }
        if (fai) {
            this.fai = fai;
        }
        else if (faiPath) {
            this.fai = new generic_filehandle_1.LocalFile(faiPath);
        }
        else if (path) {
            this.fai = new generic_filehandle_1.LocalFile("".concat(path, ".fai"));
        }
        else {
            throw new Error('Need to pass filehandle for  or path to localfile');
        }
        this.chunkSizeLimit = chunkSizeLimit;
    }
    IndexedFasta.prototype._getIndexes = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.indexes) {
                    this.indexes = readFAI(this.fai, opts);
                }
                return [2 /*return*/, this.indexes];
            });
        });
    };
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */
    IndexedFasta.prototype.getSequenceNames = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = (_a = Object).keys;
                        return [4 /*yield*/, this._getIndexes(opts)];
                    case 1: return [2 /*return*/, _b.apply(_a, [(_c.sent()).name])];
                }
            });
        });
    };
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */
    IndexedFasta.prototype.getSequenceSizes = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var returnObject, idx, vals, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        returnObject = {};
                        return [4 /*yield*/, this._getIndexes(opts)];
                    case 1:
                        idx = _a.sent();
                        vals = Object.values(idx.id);
                        for (i = 0; i < vals.length; i += 1) {
                            returnObject[vals[i].name] = vals[i].length;
                        }
                        return [2 /*return*/, returnObject];
                }
            });
        });
    };
    /**
     * @returns {array[string]} array of string sequence
     * names that are present in the index, in which the
     * array index indicates the sequence ID, and the value
     * is the sequence name
     */
    IndexedFasta.prototype.getSequenceSize = function (seqName, opts) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var idx;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this._getIndexes(opts)];
                    case 1:
                        idx = _b.sent();
                        return [2 /*return*/, (_a = idx.name[seqName]) === null || _a === void 0 ? void 0 : _a.length];
                }
            });
        });
    };
    /**
     *
     * @param {string} name
     * @returns {Promise[boolean]} true if the file contains the given reference sequence name
     */
    IndexedFasta.prototype.hasReferenceSequence = function (name, opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getIndexes(opts)];
                    case 1: return [2 /*return*/, !!(_a.sent()).name[name]];
                }
            });
        });
    };
    /**
     *
     * @param {number} seqId
     * @param {number} min
     * @param {number} max
     */
    IndexedFasta.prototype.getResiduesById = function (seqId, min, max, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var indexEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getIndexes(opts)];
                    case 1:
                        indexEntry = (_a.sent()).id[seqId];
                        if (!indexEntry) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, this._fetchFromIndexEntry(indexEntry, min, max, opts)];
                }
            });
        });
    };
    /**
     * @param {string} seqName
     * @param {number} min
     * @param {number} max
     */
    IndexedFasta.prototype.getResiduesByName = function (seqName, min, max, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var indexEntry;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getIndexes(opts)];
                    case 1:
                        indexEntry = (_a.sent()).name[seqName];
                        if (!indexEntry) {
                            return [2 /*return*/, undefined];
                        }
                        return [2 /*return*/, this._fetchFromIndexEntry(indexEntry, min, max, opts)];
                }
            });
        });
    };
    //alias for getResiduesByName
    IndexedFasta.prototype.getSequence = function (seqName, min, max, opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getResiduesByName(seqName, min, max, opts)];
            });
        });
    };
    IndexedFasta.prototype._fetchFromIndexEntry = function (indexEntry, min, max, opts) {
        if (min === void 0) { min = 0; }
        return __awaiter(this, void 0, void 0, function () {
            var end, position, readlen, residues;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        end = max;
                        if (min < 0) {
                            throw new TypeError('regionStart cannot be less than 0');
                        }
                        if (end === undefined || end > indexEntry.length) {
                            end = indexEntry.length;
                        }
                        if (min >= end) {
                            return [2 /*return*/, ''];
                        }
                        position = _faiOffset(indexEntry, min);
                        readlen = _faiOffset(indexEntry, end) - position;
                        if (readlen > this.chunkSizeLimit) {
                            throw new Error("data size of ".concat(readlen.toLocaleString(), " bytes exceeded chunk size limit of ").concat(this.chunkSizeLimit.toLocaleString(), " bytes"));
                        }
                        residues = Buffer.allocUnsafe(readlen);
                        return [4 /*yield*/, this.fasta.read(residues, 0, readlen, position, opts)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, residues.toString('utf8').replace(/\s+/g, '')];
                }
            });
        });
    };
    return IndexedFasta;
}());
exports.default = IndexedFasta;
//# sourceMappingURL=indexedFasta.js.map